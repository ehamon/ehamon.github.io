<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>A bit closer to heaven</title><link>http:/</link><description></description><lastBuildDate>Mon, 18 May 2015 14:00:00 +0200</lastBuildDate><item><title>"Datashield to SplashID converter"</title><link>http:/posts/20150518/datashield-to-splashid-converter/</link><description>&lt;h1 id="preface"&gt;Preface #&lt;/h1&gt;
&lt;p&gt;This post was written in 2008. It is still available on my first personal &lt;em&gt;dokuwiki&lt;/em&gt; &lt;a href="(http://ehamon.free.fr/datashield2splashid/doku.php)"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I convert the old wiki in Markdown format, for the future.
Google signals me by email that my very old Dokuwiki don't follow  responsive design.
The french web-provider FREE do not authorize wikis any more on their sites. Then i close logins and i won't migrate the wiki. Maybe the site will be vanished in some days (months, years).&lt;/p&gt;
&lt;p&gt;Regards&lt;/p&gt;
&lt;p&gt;Eric&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="introduction"&gt;Introduction #&lt;/h1&gt;
&lt;p&gt;Early adept of handheld from
&lt;a href="http://ehamon.free.fr/datashield2splashid/doku.php"&gt;Palm Corporation&lt;/a&gt;
, i am very happy with my last
(and now old) handheld: a
&lt;a href="http://www.palm.com/us/products/handhelds/tx/index.html"&gt;Palm Tx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But i look for a better integrated system with GPS, bluetooth2, large
screen, like latest smartphones. Actual devices from Palmâ„¢ don't fill my
criteria. Oups.&lt;/p&gt;
&lt;p&gt;Ready to switch to a concurrent?&lt;/p&gt;
&lt;p&gt;Not really, i use an application on a daily basis. Its name is
&lt;a href="http://www.ultrasoft.com/datashield/"&gt;Datashield&lt;/a&gt; from
&lt;a href="http://www.ultrasoft.com"&gt;Ultrasoft&lt;/a&gt;. A great product! But it seems
that this application is built only on PalmOS system.&lt;/p&gt;
&lt;p&gt;Thus, i searched an alternative for Datashield. Quickly, i found
&lt;a href="http://www.splashdata.com/splashid/index.asp"&gt;SplashID&lt;/a&gt;. Similar to
Datashield, splashID works on multiple devices: PALM, Symbian, iPhone,
windows CE/pocket/mobile, etc.&lt;/p&gt;
&lt;p&gt;I don't want to write again my three hundred of personal records on the
new system. A first search shows that the Datashield desktop could
export data in a file with XML format. Great! After that i seeked a
converter to import my xml-file (from Datashield desktop) to SplashID
desktop. I still search. Huh.&lt;/p&gt;
&lt;p&gt;At last, i decided to build a quick and dirty script to do the job.&lt;/p&gt;
&lt;p&gt;With hope, that could be usefull for anyone.&lt;/p&gt;
&lt;p&gt;Regards Eric HAMON&lt;/p&gt;
&lt;h1 id="limitations"&gt;Limitations&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Scripts are only parts of a one-way
converter. Datashield to SplashID. no less, no more.&lt;/li&gt;
&lt;li&gt;I didn't respect 'design pattern'. Scripts work well but lack of readiness. Blame me and delete all files after the migration of your data.&lt;/li&gt;
&lt;li&gt;I am Perl addict for a long time. This project is my first use of the ruby language.&lt;/li&gt;
&lt;li&gt;Datashield and SplashID desktops are Windows programs. Thus the
converter 'Datashield2SplashID' runs on Windows too.
Ruby scripts are simple and don't use windows API. They run well on linux box (tested on ubuntu 8.04), but i have not test 'Datashield and SplashId desktops' on Linux-box. Maybe on &lt;a href="www.winehq.org/"&gt;wine&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="steps"&gt;Steps&lt;/h1&gt;
&lt;h2 id="install-sqlite3-library"&gt;Install sqlite3 library&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="http://www.sqlite.org/download.html"&gt;SQLite downloads&lt;/a&gt; page and
grab the sqlitedll-3-xx.zip archive.&lt;/li&gt;
&lt;li&gt;Extract it to &lt;em&gt;C:&lt;/em&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-your-ruby-environnement"&gt;Install your Ruby environnement&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What? You haven't tried yet ruby? It's a kidding
joke.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;download Ruby &lt;a href="http://rubyinstaller.rubyforge.org/wiki/wiki.pl"&gt;RubyInstaller&lt;/a&gt;. see details on &lt;a href="http://www.ruby-lang.org"&gt;ruby-lang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="update-your-ruby-environment-windows-only"&gt;Update your ruby environment (windows only)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download RubyGem and install it. (&lt;a href="http://www.rubygems.org/read/chapter/3"&gt;RubyGem howto&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;gem uninstall hpricot&lt;/li&gt;
&lt;li&gt;gem update gem -v&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="add-ruby-libraries"&gt;Add ruby libraries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open a command terminal (alias 'cmd')&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install sqlite3-ruby --version&lt;span class="o"&gt;=&lt;/span&gt;1.2.2
gem install xml-simple
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="download-datashield-desktop"&gt;Download 'Datashield Desktop'&lt;/h2&gt;
&lt;p&gt;If you still not use the 'Datashield Desktop', it's time to download and
install this application.
&lt;a href="http://www.ultrasoft.com/datashield/"&gt;UltraSoft website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More instructions are available on the Ultrasoft or Palm web-pages.&lt;/p&gt;
&lt;p&gt;Datashield Desktop is a commercial product limited in time 30-day trial.
A dozen of minutes is enough to our migration.&lt;/p&gt;
&lt;h2 id="synchronization-of-datashield-data"&gt;Synchronization of datashield data&lt;/h2&gt;
&lt;p&gt;First! You must synchronize your Palm data with your Desktop.&lt;/p&gt;
&lt;h3 id="export-your-personal-data-from-datashield-desktop"&gt;Export your personal data from 'Datashield Desktop'&lt;/h3&gt;
&lt;h4 id="create-a-working-directory-for-the-migration"&gt;Create a working directory for the migration&lt;/h4&gt;
&lt;p&gt;open a command terminal (alias 'cmd')
    mkdir \dataconvert
    cd \dataconvert&lt;/p&gt;
&lt;h4 id="export-your-personnal-data-from-datashield-desktop"&gt;Export your personnal data from 'Datashield Desktop'&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Run 'Datashield desktop'&lt;/li&gt;
&lt;li&gt;Go to the menu 'File'&lt;/li&gt;
&lt;li&gt;click on 'Export...'.&lt;/li&gt;
&lt;li&gt;Save as 'Datashield.xml' in the directory created before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="datashield-screenshot-0.png" src="/images/20150518/datashield-screenshot-0.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncheck 'Encrypt exported data' !!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Close the program. You don't need anymore 'Datashield desktop'.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="download-and-run-ruby-scripts"&gt;Download and run ruby scripts&lt;/h2&gt;
&lt;p&gt;Download &lt;a href="/images/20150518/readit.rb"&gt;readIt.rb&lt;/a&gt; and &lt;a href="/images/20150518/writeit.rb"&gt;writeIt.rb&lt;/a&gt; to &lt;em&gt;C:&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readIt.rb&lt;/strong&gt; import the xml-exportfile from dataShield to a sqlite3 database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;writeIt.rb&lt;/strong&gt; create a file to import with SplashId desktop software from the sqlite3 database.&lt;/p&gt;
&lt;h2 id="run-the-machina"&gt;Run the machina&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open a command terminal (alias 'cmd')&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruby readit.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A sqlite datafile named '&lt;em&gt;Datashield.db3&lt;/em&gt;' will be created. That's all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in the same terminal session, run&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruby writeit.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two files are created. 
1. splashId-listetypes.txt =&gt; fieldnames of categories.
2. splashId-ego.csv =&gt; a csv-file containing your precious data.&lt;/p&gt;
&lt;h2 id="download-software-splashid-desktop"&gt;Download software 'SplashID Desktop'&lt;/h2&gt;
&lt;p&gt;See &lt;a href="http://www.splashdata.com/splashid/index.asp"&gt;SplashData&lt;/a&gt; to
download the software suited to your device.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install 'SplashID Desktop' on your PC.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="final-data-import"&gt;Final data import&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run 'SplashId Desktop'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to the menu 'File', 'Import' and click on 'CSV...'.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="splashid-screenshot-csv.png" src="/images/20150518/splashid-screenshot-csv.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select and confirm the file '-ego.csv'&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="create-categories"&gt;Create categories&lt;/h3&gt;
&lt;p&gt;If you double-click a record, you notice that all of Fieldname are named
'Field1' to 'Field9'.&lt;/p&gt;
&lt;p&gt;'SplashId Desktop' don't care of that. You have to rename manually, one
by one, all fieldnames of types.&lt;/p&gt;
&lt;p&gt;read my &lt;a href="http://forum.splashdata.com/showthread.php?t=1456"&gt;post&lt;/a&gt; on
&lt;a href="http://www.splashdata.com/forum"&gt;splashdata forum&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="to-do-it-follow-those-steps"&gt;To do it, follow those steps.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Edit or (better) print the file 'splashId-listetypes.txt'.
(This file only contains fieldnames of type records really used in your data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on combo-box named 'Type'
&lt;img alt="splashid-screenshot-0.jpg" src="/images/20150518/splashid-screenshot-0.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Select the last item 'Edit types' 
&lt;img alt="splashid-screenshot-1.jpg" src="/images/20150518/splashid-screenshot-1.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit each imported records type
&lt;img alt="splashid-screenshot-2.jpg" src="/images/20150518/splashid-screenshot-2.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sample
&lt;img alt="Sample" src="/images/20150518/splashid-screenshot-3.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Your personnal data are now fully imported and be ready to give you
satisfaction on your handheld. 'Datashield2SplashID' job is done.&lt;/p&gt;
&lt;p&gt;If you use my scripts, send-me an email. I am curious to know, how many
people migrate from datashield to splashId.&lt;/p&gt;
&lt;h1 id="contacts"&gt;Contacts&lt;/h1&gt;
&lt;p&gt;Author: Eric HAMON &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#101;&amp;#114;&amp;#105;&amp;#99;&amp;#64;&amp;#101;&amp;#104;&amp;#97;&amp;#109;&amp;#111;&amp;#110;&amp;#46;&amp;#102;&amp;#114;"&gt;&amp;#101;&amp;#114;&amp;#105;&amp;#99;&amp;#64;&amp;#101;&amp;#104;&amp;#97;&amp;#109;&amp;#111;&amp;#110;&amp;#46;&amp;#102;&amp;#114;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="support"&gt;Support&lt;/h1&gt;
&lt;p&gt;Well. Feel free to alter scripts. I don't use them
anymore. You know why. 8-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric HAMON</dc:creator><pubDate>Mon, 18 May 2015 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:,2015-05-18:posts/20150518/datashield-to-splashid-converter/</guid></item><item><title>Resoudre un sudoku en langage ruby</title><link>http:/posts/20130521/resoudre-un-sudoku-en-langage-ruby/</link><description>&lt;p&gt;Voici un script ruby pour rÃ©soudre de maniÃ¨re Ã©lÃ©gante les problÃ¨mes Sudoku.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudoku&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;ENDSUDOKU&lt;/span&gt;
&lt;span class="sh"&gt; .  .  .  1  .  .  .  6  4&lt;/span&gt;
&lt;span class="sh"&gt; 5  .  .  .  7  .  3  .  .&lt;/span&gt;
&lt;span class="sh"&gt; 8  .  2  .  .  .  .  .  .&lt;/span&gt;
&lt;span class="sh"&gt; .  4  .  .  1  2  5  .  .&lt;/span&gt;
&lt;span class="sh"&gt; 1  .  .  .  .  .  .  .  2&lt;/span&gt;
&lt;span class="sh"&gt; .  .  5  8  3  .  .  9  .&lt;/span&gt;
&lt;span class="sh"&gt; .  .  .  .  .  .  4  .  3&lt;/span&gt;
&lt;span class="sh"&gt; .  .  9  .  2  .  .  .  7&lt;/span&gt;
&lt;span class="sh"&gt; 7  8  .  .  .  1  .  .  .&lt;/span&gt;
&lt;span class="no"&gt;ENDSUDOKU&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sudoku&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# An element for each position on the board&lt;/span&gt;
    &lt;span class="vi"&gt;@cols&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# A set for each column&lt;/span&gt;
    &lt;span class="vi"&gt;@rows&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# A set for each row&lt;/span&gt;
    &lt;span class="vi"&gt;@grids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# A set for each 3x3 grid&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each_with_index&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_s&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="vi"&gt;@a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;            &lt;span class="c1"&gt;# We&amp;#39;ve reached the end!&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# This square is fixed, so try the next.&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;    &lt;span class="c1"&gt;# Try each possible value for this square.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;can_set?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
          &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="vi"&gt;@a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Returns true if square i can be set to n without invalidating the sudoku.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_set?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;row_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;grid_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;[]=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
      &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;col_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;row_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;grid_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;col_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="n"&gt;row_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="n"&gt;grid_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="vi"&gt;@a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kp"&gt;private&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;col_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="vi"&gt;@cols&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;row_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="vi"&gt;@rows&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grid_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="vi"&gt;@grids&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="no"&gt;Sudoku&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sudoku&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric HAMON</dc:creator><pubDate>Tue, 21 May 2013 20:34:00 +0200</pubDate><guid isPermaLink="false">tag:,2013-05-21:posts/20130521/resoudre-un-sudoku-en-langage-ruby/</guid></item></channel></rss>